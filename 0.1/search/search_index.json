{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>The Pycript extension for Burp Suite is a valuable tool for penetration testing and security professionals. It enables easy encryption and decryption of requests during testing, which can help evade detection and bypass security measures. The extension also offers the ability to customize the encryption and decryption process by writing custom logic using JavaScript and Node.js, making it a highly adaptable tool for various needs. Additionally, it supports both manual and automated testing, as well as custom encryption/decryption plugins, making it a versatile solution for different penetration testing scenarios.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Ability to decrypt requests and modify data in real-time</li> <li>Provides JavaScript and NodeJS support for custom encryption and decryption logic.</li> <li>The ability to retrieve the encryption key and IV directly from the request header and body using Burpsuite and JavaScript.</li> <li>Supports decryption of multiple requests </li> <li>Use auto-encryption to perform an automated burp scan or sqlmap</li> </ul>"},{"location":"#sponsor","title":"Sponsor","text":""},{"location":"#team","title":"Team","text":""},{"location":"#sourav-kalal","title":"Sourav Kalal","text":""},{"location":"#documentation","title":"Documentation","text":""},{"location":"#prerequisites","title":"Prerequisites","text":""},{"location":"#installation","title":"Installation","text":""},{"location":"#usage-examples","title":"Usage Examples","text":""},{"location":"#writing-custom-scripts","title":"Writing Custom Scripts","text":""},{"location":"Examples/","title":"Flow of the Extension","text":"<ul> <li>Load the Encryption and Decryption JavaScript File in the extension</li> <li>Select the Request Type according to your request and encryption</li> <li>Add the URL in Burp Suite Scope</li> <li>Go to Repeater, Proxy Intercept, Proxy History, Intruder, Target</li> <li>You can see a new tab in the request message named PyCript</li> <li>If everything is setup correctly and the extension is given the correct encryption decryption code you see the decrypted text</li> <li>Edit the decrypted text and send the request</li> <li>The extension will take care of the encryption of your modified value</li> </ul>"},{"location":"Examples/#config","title":"Config","text":"<p>The config tab has all the settings you will be required to perform the encryption and decryption. The PyCript extension encodes the request body of a message in Burp Suite using base64 encoding. It then provides both the headers and encoded body to JavaScript code. The JavaScript code is responsible for decrypting or encrypting the request body. After the JavaScript code is finished, the extension retrieves the updated body and updates the request in Burp Suite.</p> <p>Warning</p> <p>The extension works only on URLs added in the burp suite Scope</p>"},{"location":"Examples/#request-type","title":"Request Type","text":"<p>The Request Type allows you to select the type of request or message that needs to e encrypted or decrypt.</p> <p>This type can be used if your complete request body is encrypted. The extension will take the body and base64 encode it and will send it to the JavaScript code.</p> <pre><code>POST /crypto/myprofile/ HTTP/1.1\nHost: localhost:8000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 24\n\nKtKB81Oamvuzo9entPFKZQ==\n</code></pre> <p>The above request has a completely encrypted body. If the Decrypted output is in JSON format then we can use <code>Whole Body (JSON)</code> else we can use <code>Custom Body</code>.</p> <p></p> <p>Tip</p> <p>The only difference between <code>Whole Body (JSON)</code> and <code>Custom Body</code> is Whole Body (JSON) expects the decrypted output in JSON whereas Custom Body doesn't have any validation for output.</p> <p>This type can be used if your request body is in JSON Format but only values are encrypted. The extension will go through each value and will perform the encryption decryption on each value one by one. each value will be base64 encoded and will send to the JavaScript code.</p> <pre><code>POST /crypto/login/ HTTP/1.1\nHost: localhost:8000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 77\n\n{\"username\":\"HgE40uCnUDbOfuat6om5QA==\",\"password\":\"FZbf3I/h9ORUV+H6Wzv4gA==\"}\n</code></pre> <p>The above request has only value encrypted and the <code>JSON Value</code> type can be used.</p> <p></p> <p>Tip</p> <p>You can still use Whole Body (JSON) and Custom Body in this type of request but in that case, you will be required to add the logic in your JavaScript code to go through each value and provide the updated request body.</p> <p>This type can be used if your request body is in JSON Format with the key and value both encrypted. The extension will go through each key and value pair and will perform the encryption decryption on each key and value one by one. each key and value will be base64 encoded and will send to the JavaScript code.</p> <pre><code>POST /crypto/login/ HTTP/1.1\nHost: localhost:8000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 77\n\n{\"I8DMuVVrqGFOFsHLCjZDog==\":\"HgE40uCnUDbOfuat6om5QA==\",\"JWJ3uwqkCOenhQxZuS9ILA==\":\"FZbf3I/h9ORUV+H6Wzv4gA==\"}\n</code></pre> <p>The above request is the same as JSON Value but with key and value both are encrypted and the <code>JSON Key &amp; Value</code> type can be used.</p> <p>Tip</p> <p>You can still use Whole Body (JSON) and Custom Body in this type of request but in that case, you will be required to add the logic in your JavaScript code to go through each key and value and provide the updated request body.</p> <p>The custom request is useful when you need to perform any action using javascript code like the body is encrypted but the key or IV is in the header and you can't use Whole Body (JSON) or Custom Body option.</p> <p>The Custom Request type will take the request body and will encode the request body with base64 and will provide it to the JavaScript code. The extension will also take the Request header and which will be also provided to JavaScript code and you can use Javascript code to get the key and IV from the header.</p> <pre><code>POST /crypto/myprofile/ HTTP/1.1\nHost: localhost:8000\nAccept-Encoding: gzip, deflate\nAccept: */*\nAccept-Language: en-US;q=0.9,en;q=0.8\nUser-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36\nConnection: close\nCache-Control: max-age=0\nKey: 1234\nIv: 1234\nContent-Type: application/x-www-form-urlencoded\nContent-Length: 24\n\nKtKB81Oamvuzo9entPFKZQ==\n</code></pre> <p>The above request is the same as Whole Body (JSON) and Custom Body but with key and IV in the header hence you can't keep iv and key hardcoded in your JS file. The <code>Custom Request</code> type can be used here to get headers and in JS we can retrieve the key and iv.</p> <p>Tip</p> <p>The extension will only take the output of the modified body from the JS. If you need to modify the headers as well the extension doesn't support it as of version 0.1.</p> <p>This Request type will inform the extension that the current status is OFF and the extension will not try to encrypt or decrypt the request.</p> <p>Tip</p> <p>The extension will not allow the selection of the <code>Request Type</code> Unless Encryption and Decryption JS files are not selected.</p>"},{"location":"Examples/#whole-body-json-and-custom-body","title":"Whole Body (JSON) and Custom Body","text":""},{"location":"Examples/#json-value","title":"JSON Value","text":""},{"location":"Examples/#json-key-value","title":"JSON Key &amp; Value","text":""},{"location":"Examples/#custom-request","title":"Custom Request","text":""},{"location":"Examples/#none","title":"None","text":""},{"location":"Examples/#auto-encrypt","title":"Auto Encrypt","text":"<p>The auto encrypts request will allow you to encrypt the request. You can select the tool type for which the request needs to be encrypted. This feature is useful to perform automated scans like Burp Suite Active Scan or SQLMAP.</p> <p>If you have an encrypted request and you need to run the burp suite scanner on that request. It's not directly since any payload added in plain text format to any encrypted parameter server will reject the request and will give you an error as decryption at the server side is failed.</p> <p>In that case, you can send the decrypted request to the scanner and turn on the Auto Encrypt and also select the Tool Type for the scanner.</p> <p>The Scanner will get the decrypted request to add any payload. The extension will encrypt the request (Based on the Request Type selected) before the scanner sends it to the server.</p> <p>Similarly, you can provide the decrypted request to Sqlmap and configure Sqlmap to send all requests to the burp proxy. Also, turn on the Auto Encrypt.</p> <p>Info</p> <p>The extension will not allow to turn on <code>Auto Encrypt</code> unless <code>Request Type</code> is not selected excluding None. Also at least one <code>Tool type</code> is required</p>"},{"location":"Examples/#encryption-decryption-file","title":"Encryption Decryption File","text":"<p>To encrypt and decrypt messages, you will need to choose two separate files; one for encryption and one for decryption.</p> <p>Tip</p> <p>The extension requires encryption and decryption files before doing anything.</p>"},{"location":"Examples/#additional-features","title":"Additional Features","text":""},{"location":"Examples/#decrypt-request","title":"Decrypt Request","text":"<p>The PyCript extension provides the ability to automatically decrypt multiple requests. This eliminates the need for manually decrypting individual requests and then sending them to the scanner. To use this feature:</p> <ul> <li> <p>Open Burp Suite and navigate to the <code>\"Proxy\", \"Target\", \"Intruder\" or \"Repeater\"</code> tab.</p> </li> <li> <p>Right-click on the request you wish to decrypt and select <code>\"Extensions\"</code> from the menu.</p> </li> <li> <p>From the submenu, select <code>\"PyCript\"</code></p> </li> <li> <p>Select <code>\"Decrypt Request\"</code> from the options presented.</p> </li> <li> <p>The PyCript extension will now decrypt all the requests and will store the decrypted requests in the <code>\"Decrypted Requests\"</code> tab inside the table.</p> </li> <li> <p>Navigate to the <code>PyCript</code> Tab and inside select the <code>\"Decrypted Requests\"</code></p> </li> <li> <p>It will display all the decrypted requests.</p> </li> <li> <p>Select any row or multiple rows Right-click. The extension will allow you to send all the selected decrypted requests to Repeater, Intruder, Scanner or Resend the Request.</p> </li> <li> <p>The Resend HTTP Request can send the HTTP request to the server with the decrypted request. You can view that request from the logger or use an upstream proxy to send the request to another Burp Suite.</p> </li> </ul>"},{"location":"Examples/#encrypt-string","title":"Encrypt String","text":"<p>The extension allows you to encrypt any string you select within the request and response. </p> <ul> <li> <p>Open Burp Suite and navigate to the <code>\"Proxy\", \"Target\", \"Intruder\" or \"Repeater\"</code> tab.</p> </li> <li> <p>Select anything within the request or response.</p> </li> <li> <p>Right-click on the request you wish to encrypt and select <code>\"Extensions\"</code> from the menu.</p> </li> <li> <p>From the submenu, select <code>\"PyCript\"</code></p> </li> <li> <p>Select <code>\"Encrypt String\"</code> from the options presented.</p> </li> <li> <p>The extension will show a Popup with the encrypted output for your selected string.</p> </li> </ul>"},{"location":"Examples/#decrypt-string","title":"Decrypt String","text":"<p>The extension allows you to decrypt any string you select within the request and response. </p> <ul> <li> <p>Open Burp Suite and navigate to the <code>\"Proxy\", \"Target\", \"Intruder\" or \"Repeater\"</code> tab.</p> </li> <li> <p>Select anything within the request or response.</p> </li> <li> <p>Right-click on the request you wish to decrypt and select <code>\"Extensions\"</code> from the menu.</p> </li> <li> <p>From the submenu, select <code>\"PyCript\"</code></p> </li> <li> <p>Select <code>\"Decrypt String\"</code> from the options presented.</p> </li> <li> <p>The extension will show a Popup with the Decrypted output for your selected string.</p> </li> </ul>"},{"location":"Examples/#decrypted-request","title":"Decrypted Request","text":"<p>The tab will is used to store the decrypted request. Once you select <code>Decrypt Request</code> from the menu. The extension will store the decrypted request here. Later you can select one or multiple rows and right-click to perform the action such as send the request to <code>`Repeater, Intruder, Scanner or Send the decrypted request to the server</code></p>"},{"location":"Prerequisites/","title":"Prerequisites","text":"<ul> <li>Install NodeJS and NPM </li> <li>Burp Suite configured with Jython to install the Python extension </li> </ul> <p>Note</p> <p>Set <code>NodeJS</code> environment variable. PyCript requires <code>NodeJS</code> in system/User environment.</p> <p>Note</p> <p>PyCript is tested with <code>NodeJS v18.13.0</code> and <code>NPM v8.19.3</code>.</p>"},{"location":"Scripts/","title":"Working of the Extension","text":"<p>The extension takes the Javascript for encryption and decryption and run the system command. Since the extension use JavaScript it requires NodeJS to run it.</p> <pre><code>node user/provided/javascript/file/path/encryption.js -d bas64-encodeed-encrypted-request-body\n</code></pre> <ul> <li>The extension use <code>-d</code> command line argument to provide the body to the JS code. If you are writing the JS script you have to make sure you allow extension to support command line arguments.</li> <li>The value of <code>-d</code> will be base64. If your orignal request is already in base64 the extension will still perform the bas64 encoding and will providee the base64 encode value to the <code>JavaScript</code> code. To the orignal value of your request body or paramter you have base64 decode the value in your JavaScript file first.</li> <li>The base64 encoding is done by the extension to avoid any kind of string related issues like spaces or special character.</li> <li>The Javascrript code can perfrom any action or add any logic on the value, the extension will read the system command output so your has to print the updated value using <code>console.log(\"updated value\")</code></li> <li>This approch and code will be same for all <code>Request Type</code> in the extension excluding <code>Custom Request</code> type in the extension.</li> <li>The same logic is applicable for encryption and decryption JavaScript Code</li> <li>The output of the <code>console.log()</code> should be the orignal output which you want to see in the burp. So the output will not de base64 decoded by the extension. Instead the output will be directly replaced in the request.</li> </ul> <p><pre><code>node user/provided/javascript/file/path/encryption.js -d bas64-encodeed-encrypted-request-body\n</code></pre> <pre><code>node user/provided/javascript/file/path/decryption.js -d bas64-encodeed-decrypted-request-body\n</code></pre></p> <p>Warning</p> <p>Since the extension read the system command output, there should not be more than 1 <code>console.log</code> in the code</p> <pre><code>var CryptoJS = require(\"crypto-js\");\nconst program = require(\"commander\");\nconst { Buffer } = require('buffer');\nprogram\n.option(\"-d, --data &lt;data&gt;\", \"Data to process\")\n.parse(process.argv);\n\nconst options = program.opts();\nconst requestbody = Buffer.from(options.data, 'base64').toString('utf8');\n\n'Your encryption and decryption logic should be here'\n\nconsole.log(Output)\n</code></pre> <ul> <li>In above code we are using cryptojs library you can use any other based your choice.</li> <li>The script code is also using command library to allow our code to implement the command line argument.</li> <li>Sice our body will be base64 encode we have buffer library to base64 decode the body.</li> <li>We are using the command library to add <code>-d</code> as command line argument in our script</li> <li>Later we are reading the value of of <code>-d</code> and then using buffer library to decode the value with base64.</li> <li>After that you can add your encryption or decryption logic.</li> <li>Lastly we have to print the output of encrypted or decrypted text using <code>console.log()</code></li> </ul>"},{"location":"Scripts/#custom-request-type","title":"Custom Request Type","text":"<p>There are some change if you write the JavaScript code for Custom request. All the above mentioned points will be applicable here will some additional details.</p> <p><pre><code>node user/provided/javascript/file/path/encryption.js -d bas64-encodeed-encrypted-request-body -h [[POST /crypto/user/ HTTP/1.1, Host: localhost:8000, Key: 1234, Iv: 1234]\n</code></pre> <pre><code>node user/provided/javascript/file/path/decryption.js -d bas64-encodeed-decrypted-request-body -h [POST /crypto/user/ HTTP/1.1, Host: localhost:8000, Key: 1234, Iv: 1234]\n</code></pre></p> <ul> <li>The extension will again run the system command with base64 encoded body using <code>-d</code></li> <li>The extension will also provide HTTP header to the JS code. The header will not be base64 encoded you can directly read the header.</li> <li>The extension doesn't allow you to modify the header values using JavaScript code and update the header in your burp request.</li> <li>Since header is not allowed to modify the there should be only 1 <code>console.log()</code> in your JS code</li> <li>You can read the output of the header provided to the JS code of your current request in the Extender tab and in the output section of the PyCript extension</li> </ul> <pre><code>[POST /crypto/myprofile/ HTTP/1.1, Host: localhost:8000, Accept-Encoding: gzip, deflate, Accept: */*, Accept-Language: en-US;q=0.9,en;q=0.8, User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.5060.134 Safari/537.36, Connection: close, Key: 1234, Iv: 1234, Cache-Control: max-age=0, Content-Type: application/x-www-form-urlencoded, Content-Length: 24]\n</code></pre> <pre><code>var CryptoJS = require(\"crypto-js\");\nconst program = require(\"commander\");\nconst { Buffer } = require('buffer');\nprogram\n.option(\"-d, --data &lt;data&gt;\", \"Data to process\")\n.option(\"-h, --header &lt;data&gt;\", \"Header\")\n.parse(process.argv);\n\nconst options = program.opts();\nconst requestbody = Buffer.from(options.data, 'base64').toString('utf8');\nconst header = options.header\n\n'Your encryption and decryption logic should be here'\n\nconsole.log(Output)\n</code></pre> <ul> <li>The code is same as previous code. Since Custom request requires header we have another command line argument as <code>-h</code></li> <li>Lastly we are reading the output of the header value and the rest of the code is same.</li> </ul>"},{"location":"Scripts/#debug","title":"Debug","text":"<p>If you are unable to decrypt or encrypt the request in extension. Make sure to verfiy if JavaScript code is working properly. If you want to encrpyt or decrypt the request body/string then base64 encode the value and run the same command in your terminal or CMD.</p> <pre><code>node user/provided/javascript/file/path/decryption.js -d bas64-encodeed-decrypted-request-body\n</code></pre> <pre><code>node user/provided/javascript/file/path/decryption.js -d bas64-encodeed-decrypted-request-body -h [POST /crypto/user/ HTTP/1.1, Host: localhost:8000, Key: 1234, Iv: 1234]\n</code></pre> <p>If you are able to encrypt and decrypt using the script manually but not with the extension. Make sure you are using the correct request type and have loaded the correct JS file in the extension. If everything is correct raise an github issues on the Pycript Repository </p> <p>Warning</p> <p>Make sure the path provided to the extension for encrpytion and decryption Javascript file has all the required library installed.</p>"},{"location":"Scripts/#demo-code","title":"Demo Code","text":"<p>If you are looking for demo encryption decryption code for common type of encryption or logic you can get it from the PyCript Template</p>"},{"location":"installation/","title":"Installation","text":"<p>Warning</p> <p>Please make sure that all the prerequisites mentioned are installed first.</p>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<ul> <li>Download the PyCript repository from GitHub either by cloning the repository using  <code>git clone https://github.com/Anof-cyber/PyCript</code> or by downloading the repository as a zip file.</li> <li>Extract the contents of the zip file if you downloaded the repository as a zip file.</li> <li>Open Burp Suite, and navigate to the \"Extender\" tab.</li> <li>Click on the \"Add\" button to add a new extension.</li> <li>In the \"Extension Type\" field, select \"Python\"</li> <li>Click on the \"Select file\" button and browse to the location of the \"pycript.py\" file, which should be located in the PyCript repository that you downloaded.</li> <li>Click on the \"Open\" button to load the PyCript extension into Burp Suite.</li> <li>The PyCript extension should now be listed under the \"Extensions\" tab in Burp Suite, and you can use its features.</li> </ul>"},{"location":"installation/#burp-suite-bapp-store-installation","title":"Burp Suite BApp Store Installation","text":"<p>Info</p> <p>The extension is not available on the Burp Suite BApp Store.</p>"}]}